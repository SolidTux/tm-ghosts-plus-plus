<script><!--

#Struct ComponentMenuLibsGrid_K_GridColumn { Real Size; Integer Align; }
#Struct ComponentMenuLibsGrid_K_GridConfig { Real Size; Real Padding; Real Gutter; Integer Direction; ComponentMenuLibsGrid_K_GridColumn[Integer] Columns; }

#Struct LibCampaignStruct_K_Top { Text AccountId; Text DisplayName; Text ZoneId; Integer Position; Text SP; }
#Struct LibCampaignStruct_K_TopScore { Text AccountId; Text DisplayName; Text ZoneId; Integer Position; Integer Score; }
#Struct LibCampaignStruct_K_TopRanking { Text ZoneName; LibCampaignStruct_K_Top[] Tops; }
#Struct LibCampaignStruct_K_Ranking { Text ZoneId; Text ZoneName; Integer Position; Integer Length; }
#Struct LibCampaignStruct_K_MapTopRanking { Text ZoneName; LibCampaignStruct_K_TopScore[] Tops; }

#Struct LibCommonTask_K_TaskOwner { Integer Type; CDataFileMgr DataFileMgr; CScoreMgr ScoreMgr; CTrackingMgr TrackingMgr; CUserV2Manager UserMgr; CPresenceMgr PresenceMgr; CRankingsZoneMgr ZoneMgr; CWSNotificationManager WSNotificationMgr; CMode Mode; }
#Struct LibCommonTask_K_TaskError { Text Type; Text Code; Text Description; }
#Struct LibCommonTask_K_Task { Ident SourceTaskId; LibCommonTask_K_TaskOwner Owner; Ident SystemDialogTaskId; CUserV2Manager SystemDialogManager; Boolean IsInitialized; Boolean IsProcessing; Boolean IsSuccess; LibCommonTask_K_TaskError Error; Text[Text] Metadata; }

#Struct LibCommonHttp_K_HttpNLSError { Text error; Text message; Text traceId; }
#Struct LibCommonHttp_K_NLSError { Text Error; Text Message; Text TraceId; }
#Struct LibCommonHttp_K_Request { Ident RequestId; Boolean IsInitialized; Boolean IsProcessing; Boolean IsWaitingSlot; Integer CooldownEndTime; Boolean IsSuccess; Boolean IsDestroyed; Integer RetryTime; Integer RetryNb; Integer RetryInterval; Text Result; Integer StatusCode; Text Url; Text Ressource; Text[Text] AdditionnalHeaders; Integer Method; Text[Text] Metadata; }

#Struct LibLeaderboardAPI_K_ResponseFromGetMapTopRankingsInClub { Text LeaderboardGroupUid; Integer Length; LibCampaignStruct_K_TopScore[] Tops; }
#Struct LibLeaderboardAPI_K_ResponseFromGetPlayerTrophyRanking { Text AccountId; Integer Points; Integer Echelon; LibCampaignStruct_K_Ranking[] Ranking; }
#Struct LibLeaderboardAPI_K_ResponseFromGetPlayersTrophyRanking { LibLeaderboardAPI_K_ResponseFromGetPlayerTrophyRanking[] Players; Integer Total; }
#Struct LibLeaderboardAPI_K_ResponseFromGetTopRankingsInClub { Integer ClubId; Integer Length; LibCampaignStruct_K_Top[] TopRankings; }

#Struct LibLeaderboardAPI_K_ResponseFromGetMapTopRankings {
	Text LeaderboardGroupUid;
	LibCampaignStruct_K_MapTopRanking[] TopRankings;
}
#Struct LibLeaderboardAPI_K_ResponseFromGetSurroundingRankings {
	Text LeaderboardGroupUid;
	LibCampaignStruct_K_TopScore[][Text] TopsByZone;
}
#Struct LibLeaderboardAPI_K_ResponseFromGetMapSurroundingRankingsInClub {
	Text LeaderboardGroupUid;
	LibCampaignStruct_K_TopScore[] Tops;
}

#Struct K_Celebration { Boolean IsActive; Integer PrevTime; Integer BestTime; Integer PrevMedal; Integer BestMedal; }
#Struct K_TMxSM_Record_Record { Integer Rank; Text AccountId; Text DisplayName; Integer Time; }
#Struct K_TMxSM_Record_Records { Text ZoneName; Integer WorstTime; Boolean IsFull; Integer Type; K_TMxSM_Record_Record[] Records; }

#Struct RRK_State {
	Boolean IsControllerNavigationEnabled;
	Boolean IsLocalMode;
	Boolean NewRecordsEnabled;
	Integer CurrentMedal;
	Integer SelectedZone;
	ComponentMenuLibsGrid_K_GridConfig GridConfig_ControllerInfos;
	K_TMxSM_Record_Records CurrentZoneRecords;
	Text SpectatorTargetAccountId;
}

#Struct K_RecordGhost {
    Text AccountId;
    Ident GhostId;
    Ident GhostInstanceId;
    LibCommonTask_K_Task Task_RetrieveGhost;
    LibCommonTask_K_Task Task_RetrieveRecords;
}

// /* use with declare RecordsClient_K_State Race_Record_State for UI; */
#Struct K_State {
    Integer SetupUpdate;
    Integer ForceMapUpdate;
    Boolean AlwaysDisplayRecords;
    Boolean ReloadRecords;
    Boolean PBGhostEnabled;
    Boolean DisplayPBGhost;
    Boolean MedalEnabled;
    Boolean CelebratePB;
    Boolean CelebrateMedal;
    Text CurrentMapUid;
    Ident TaskIdGetRecordGhost;
    Ident PBGhostId;
    Ident PBGhostInstanceId;
    Ident PBCpSyncedGhostInstanceId;
    Text ScopeSeason;
    Text ScopeNotSeason;
    Text ModeName;
    Text CustomData;
    Text[Text] SeasonIds;
    Boolean RequestCelebration;
    K_Celebration Celebration;
    Integer CurrentMedal;
    Boolean RecordsEnabled;
    Integer MapAvailaibleOnNadeoServices;
    LibCommonTask_K_Task TaskGetMapFromUid;
    Boolean PlayerIsDisplayingRecords;
    Integer RecordsSelectedZone;
    Integer RecordsPlayerTime;
    Integer RecordsServerUpdate;
    Integer[] RecordsAreDirty;
    Integer[] RecordsNeedInit;
    Boolean RequestRecordsInProgress;
    Integer[] RecordsErrorCodes;
    LibCommonHttp_K_Request RequestZonesTopRecords;
    LibCommonHttp_K_Request RequestZonesSurroundingRecords;
    LibCommonHttp_K_Request RequestClubTopRecords;
    LibCommonHttp_K_Request RequestClubSurroundingRecords;
    LibCommonHttp_K_Request RequestClubVIPList;
    LibCommonHttp_K_Request RequestGlobalVIPList;
    Ident TaskIdGetClubVIPRecords;
    Ident TaskIdGetGlobalVIPRecords;
    LibLeaderboardAPI_K_ResponseFromGetMapTopRankings ResponseZonesTopRecords;
    LibLeaderboardAPI_K_ResponseFromGetSurroundingRankings ResponseZonesSurroundingRecords;
    LibLeaderboardAPI_K_ResponseFromGetMapTopRankingsInClub ResponseClubTopRecords;
    LibLeaderboardAPI_K_ResponseFromGetMapSurroundingRankingsInClub ResponseClubSurroundingRecords;
    Integer[Text] ResponseClubVIPRecords;
    Integer[Text] ResponseGlobalVIPRecords;
    Boolean LoadingRecords;
    Text RecordsLoadedForMapUid;
    Text RecordsLoadingForMapUid;
    Ident TaskIdRetrieveDisplayName;
    Integer RecordsClubId;
    Text RecordsClubName;
    K_TMxSM_Record_Records[] ZonesRecords;
    K_RecordGhost[Text] LoadingRecordGhosts;
    K_RecordGhost[Text] LoadedRecordGhosts;
    K_RecordGhost SpectatorTargetRecordGhost;
    Boolean ManialinkIsInitialized;
}

Void CheckHookEvents() {
    declare Text[] MLHook_Inbound_RefreshRecords for ClientUI;
    // if (MLHook_Inbound_RefreshRecords == Null) {
    //     MLHook_Inbound_RefreshRecords = [];
    // }
    if (MLHook_Inbound_RefreshRecords.count > 0) {
        SendCustomEvent("MLHook_Debug_GotInboundEvents", ["Len: " ^ MLHook_Inbound_RefreshRecords.count]);
    }
    foreach (Event in MLHook_Inbound_RefreshRecords) {
        SendCustomEvent("MLHook_Debug_GotEvent", [""^Event]);
        if (Event == "Hook_RefreshRecords") {
            declare K_State Race_Record_State for UI;
            Race_Record_State.SetupUpdate = -1; // should trigger a refresh
            Race_Record_State.RecordsEnabled = False; // should trigger a refresh
            Race_Record_State.CurrentMapUid = ""; // should trigger a refresh
            Race_Record_State.RecordsAreDirty.add(0); // should trigger a refresh
            Race_Record_State.RecordsAreDirty.add(1); // should trigger a refresh
            Race_Record_State.RecordsAreDirty.add(2); // should trigger a refresh
            Race_Record_State.RecordsAreDirty.add(3); // should trigger a refresh
            Race_Record_State.RecordsAreDirty.add(4); // should trigger a refresh
        }
    }
    MLHook_Inbound_RefreshRecords = [];
}

main() {
    while(True) {
        yield;
        CheckHookEvents();
    }
}

--></script>
